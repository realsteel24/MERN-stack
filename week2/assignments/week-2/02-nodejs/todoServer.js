/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)
  
  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');


const app = express(); 
app.use(bodyParser.json());

function readfile() {
  return new Promise((resolve, reject) => {
    fs.readFile('todos.json', 'utf-8', (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}
  
let todo = [{
  "id": 1,
  "item": {
    "title": "Fourth task",
    "description": "Added task",
    "completed": false
  }
},{
  "id": 2,
  "item": {
    "title": "Fourth task",
    "description": "Added task",
    "completed": false
  }
}]
  
app.get("/todos", async (req, res) => {
  const data = await readfile();
  console.log(data)
  res.status(200).send(data);
})

app.get("/todos/:id", async (req, res) => {
  let searchId = parseInt(req.params.id); 
  const finder = todo.find(todo => todo.id === searchId)
  if (finder) {
    res.status(200).json(finder)
  } else {
    res.status(404).send("invalid inputs")
  }

})

app.post("/todos", (req, res) => {
  const item = req.body;
  console.log(req.body)
  let id = todo.length + 1;
  todo.push({ id, item })
  res.status(201).send(todo)
  
})

app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const update = req.body;
  const search = todo.find(todo => todo.id === id)
  if (search) {
    search.item.completed = update.completed
    res.status(200).json(search)
  } else {
    res.status(404).send("Could not find item")
  }
})

app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const search = todo.findIndex(todo => todo.id === id)
  if (search != -1) {
    todo.splice(search, 1)
    res.status(200).send(todo)
  } else {
    res.status(404).send("Item not found")
  }
})

module.exports = app;
app.listen(3000)


